#Fork函数对应的创建新进程的处理过程
这篇博客将会详细分析在lunix环境中一个新进程是如何创建的，在前面的练习中，我们分析了start_kernel中几个进程的创建，如何从无到创建一个进程，再由这个进程创建更多的进程，本文将从细节方面来叙述。
####进程的结构
首先，让我们来看一下进程的大致内容，它都描述了哪些内容。
``` C
truct task_struct {
1236	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
1237	void *stack;
1238	atomic_t usage;
1239	unsigned int flags;	/* per process flags, defined below */
1240	unsigned int ptrace;
....
....
```
我们可看一下linux源代码，里面描述进程结构体的代码大概有400多行，所以，我们这里就简要地总结一下，它大概描述了哪些内容。通过源码，我们可知，进程描述符大概有进程标识符（pid）,进程的状态，进程的栈空间地址，打开的文件集合，以及等等。这些信息对进程的正常执行非常重要。
####gdb调试和fork函数的执行流程
我们知道，在linux里面，创建一个新进程是通过fork系统调用来实现的，那下面，我们就来看看，我们通过调试一个程序来具体分析一下。
首先，我的实验是在实验楼做的，我们通过分析fork调用来处理。我们在前面已经分析了系统调用了，大概知道了系统调用的具体流程。那么，下面将具体来跟踪分析fork调用，像下图一样下载。
我们知道系统调用保存现场以后，会执行相应的中断处理程序，而在linux中，fork对应的都是sys_clone,那么我们在这里加个断点，接着，我们看内核源码可知道，这个函数接着调用do_fork，再接着这里加个断点，在这个里面会有copy_process,这里加个断点，我们继续看源码，里面会调用dup_task_struct和copy_thread,我们都加个断点，最后，在我们中断返回时要执行的程序ret_from_fork加个断点，下面我们将逐步调试，看程序是不是这样执行的。如以下截图，我们可以看到程序地的确是这样一步步执行的。
这里，我们可以看到fork是如何一次调用，两次返回的。父进程的eax的返回值
####创建一个新进程的大体架构
####总结
